@inherits VilmaGroupableComponent
@inject IJSRuntime _jsRuntime

@if (Parent != null && Parent is VilmaButtonGroup)
{
    <VilmaDropdownBodyRenderer ButtonCss="@_btnCss.ToString()" ButtonTemplate="ButtonTemplate" CloseBehavior="CloseBehavior" Items="Items"
                           MenuOffset="MenuOffset" Text="@Text" IsContentVisuallyHidden="@(Parent != null && Parent is VilmaButtonGroup)" />
}
else
{
    <div class="@_dropdownCss" data-bs-theme="@GetColorMode()" @ref="_dropdownRef" id="@_id">
        <VilmaDropdownBodyRenderer ButtonCss="@_btnCss.ToString()" ButtonTemplate="ButtonTemplate" CloseBehavior="CloseBehavior" Items="Items"
                               MenuOffset="MenuOffset" Text="@Text" IsContentVisuallyHidden="@(Parent != null && Parent is VilmaButtonGroup)" />
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the button text.
    /// </summary>
    [Parameter] public string? Text { get; set; }

    /// <summary>
    /// Gets or sets the button template as HTML or Blazor markup.
    /// </summary>
    [Parameter] public RenderFragment? ButtonTemplate { get; set; }

    /// <summary>
    /// Gets or sets the lists of dropdown items.
    /// </summary>
    [Parameter] public RenderFragment Items { get; set; } = @<p>&nbsp;</p>;

    /// <summary>
    /// Gets or sets the button css classes.
    /// </summary>
    [Parameter] public string? ButtonCssClasses { get; set; }

    /// <summary>
    /// Gets or sets the dropdown css classes.
    /// </summary>
    [Parameter] public string? CssClasses { get; set; }

    /// <summary>
    /// Gets or sets the button color scheme.
    /// </summary>
    [Parameter] public ColorScheme ColorScheme { get; set; } = ColorScheme.Primary;

    /// <summary>
    /// Gets or sets the button size.
    /// </summary>
    [Parameter] public Sizes Size { get; set; } = Sizes.Normal;

    /// <summary>
    /// Gets or sets the opening direction of the menu.
    /// </summary>
    [Parameter] public DropdownDirections Direction { get; set; } = DropdownDirections.Down;

    /// <summary>
    /// Gets or sets the close behavior of the menu.
    /// </summary>
    [Parameter] public DropdownAutoClose CloseBehavior { get; set; } = DropdownAutoClose.Default;

    /// <summary>
    /// Gets or sets the position offset of the menu in relation to the button.
    /// </summary>
    [Parameter] public (int x, int y) MenuOffset { get; set; } = (0, 0);

    /// <summary>
    /// Event fired when the menu is shown.
    /// </summary>
    [Parameter] public EventCallback DropdownMenuShown { get; set; }

    /// <summary>
    /// Event fired when the menu is hidden.
    /// </summary>
    [Parameter] public EventCallback DropdownMenuHidden { get; set; }


    private CssClassCollection _btnCss = new CssClassCollection();
    private CssClassCollection _dropdownCss = new CssClassCollection();
    private ElementReference _dropdownRef;
    private string _id = Guid.NewGuid().ToString();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _btnCss.Clear();
        _dropdownCss.Clear();

        _btnCss.AddClasses("btn dropdown-toggle");
        _btnCss.Add(ColorScheme.GetButtonClass());
        _btnCss.AddClasses(ButtonCssClasses);
        _btnCss.Add(Size.GetSizeClass());

        _dropdownCss.AddClasses(Direction.GetDirectionClass());
        _dropdownCss.AddClasses(CssClasses);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            try
            {
                var dotnetRef = DotNetObjectReference.Create(this);
                _jsRuntime.InvokeVoidAsync("VilmaBlazor.dropdownInit", _dropdownRef, dotnetRef);
            }
            catch { }
        }
    }

    internal override void SetDisabledStatus(bool newStatus)
    {
        
    }

    /// <summary>
    /// Fires the DropdownHidden event callback
    /// </summary>
    [JSInvokable]
    public void OnDropdownHidden()
    {
        DropdownMenuHidden.InvokeAsync();
    }

    /// <summary>
    /// Fires the DropdownShown event callback
    /// </summary>
    [JSInvokable]
    public void OnDropdownShown()
    {
        DropdownMenuShown.InvokeAsync();
    }
}

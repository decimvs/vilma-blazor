@inject IJSRuntime _jsRuntime
@inherits VilmaBasicComponent

<div class="@_alertCss" role="alert" aria-live="assertive" aria-atomic="true" @ref="@_alertReference">
    @if (string.IsNullOrWhiteSpace(Content))
    {
        @ContentTemplate
    }
    else
    {
        @Content
    }

    @if (ShowCloseButton)
    {
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="@(() => AlertClosed.InvokeAsync(this))"></button>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the text content of the alert. If you want to use HTML or other components
    /// use ContentTemplate property instead.
    /// </summary>
    [Parameter] public string? Content { get; set; }

    /// <summary>
    /// Gets or sets the content of the alert defined by pure HTML or other components.
    /// </summary>
    [Parameter] public RenderFragment? ContentTemplate { get; set; }

    /// <summary>
    /// Gets or sets this component style.
    /// </summary>
    [Parameter] public ColorScheme ColorScheme { get; set; } = ColorScheme.None;

    /// <summary>
    /// Gets or sets additional CSS classes to the alert.
    /// </summary>
    [Parameter] public string? CssClasses { get; set; }

    /// <summary>
    /// Show or hide the close button.
    /// </summary>
    [Parameter] public bool ShowCloseButton { get; set; }

    /// <summary>
    /// Fired when this alert is closed.
    /// </summary>
    [Parameter] public EventCallback<VilmaAlert> AlertClosed { get; set; }

    /// <summary>
    /// Gets or sets an unique identifier for this object
    /// </summary>
    [Parameter] public string? ObjectId { get; set; }

    private ElementReference? _alertReference;
    private CssClassCollection _alertCss = new CssClassCollection();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _alertCss.Clear();
        //_alertCss.AddClasses("toast align-items-center show");
        _alertCss.AddClasses("alert fade show");
        _alertCss.Add(ColorScheme.GetAlertClass());

        if (ShowCloseButton)
            _alertCss.Add("alert-dismissible");

        _alertCss.AddClasses(CssClasses);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            try
            {
                var dnReference = DotNetObjectReference.Create(this);
                await _jsRuntime.InvokeVoidAsync("VilmaBlazor.setAlertListeners", dnReference, _alertReference);
            }
            catch { }
        }
    }

    /// <summary>
    /// Closes this alert
    /// </summary>
    public void Close()
    {
        _jsRuntime.InvokeVoidAsync("VilmaBlazor.alertClose", _alertReference);
    }
}

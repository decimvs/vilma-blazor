@inject IJSRuntime _jsRuntime
@inherits VilmaBasicComponent

<div @attributes="_alertAttributes" @ref="_alertReference">
    @if (ShowCloseButton)
    {
        <a class="uk-alert-close" uk-close></a>
    }

    @if (string.IsNullOrWhiteSpace(Content))
    {
        @BodyTemplate
    }
    else
    {
        @Content
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the text content of the alert. If you want to use HTML or other components 
    /// use BodyTemplate property instead.
    /// </summary>
    [Parameter] public string? Content { get; set; }

    /// <summary>
    /// Gets or sets the content of the alert defined by pure HTML or other components.
    /// </summary>
    [Parameter] public RenderFragment? BodyTemplate { get; set; }

    /// <summary>
    /// Gets or sets this component style.
    /// </summary>
    [Parameter] public ComponentStyle? ColorScheme { get; set; } = null;

    /// <summary>
    /// Show or hide the close button.
    /// </summary>
    [Parameter] public bool ShowCloseButton { get; set; } 

    /// <summary>
    /// Enables or disables the alert animation. Default is true.
    /// </summary>
    [Parameter] public bool EnableAnimation { get; set; } = true;

    /// <summary>
    /// Set the animation duration in miliseconds. Default is 150 miliseconds
    /// </summary>
    [Parameter] public int AnimationDuration { get; set; } = 150;

    private Dictionary<string, object> _alertAttributes = new Dictionary<string, object>();
    private ElementReference? _alertReference;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _alertAttributes.Clear();
        List<string> parameters = new List<string>();
        parameters.Add($"animation: {EnableAnimation}");
        parameters.Add($"duration: {AnimationDuration}");

        _alertAttributes.Add("uk-alert", string.Join(';', parameters));

        // Style
        if (ColorScheme == ComponentStyle.Success)
            _alertAttributes.Add("class", "uk-alert-success");
        else if (ColorScheme == ComponentStyle.Danger)
            _alertAttributes.Add("class", "uk-alert-danger");
        else if (ColorScheme == ComponentStyle.Warning)
            _alertAttributes.Add("class", "uk-alert-warning");
        else if (ColorScheme == ComponentStyle.Primary)
            _alertAttributes.Add("class", "uk-alert-primary");
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            var dnReference = DotNetObjectReference.Create(this);
            await _jsRuntime.InvokeVoidAsync("VilmaBlazor.setAlertListeners", dnReference, _alertReference);
        }
    }

    /// <summary>
    /// Closes this alert
    /// </summary>
    public void Close()
    {
        _jsRuntime.InvokeVoidAsync("VilmaBlazor.alertClose", _alertReference);
    }
}

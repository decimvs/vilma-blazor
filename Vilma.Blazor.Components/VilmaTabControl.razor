@inherits VilmaBasicComponent

<div class="@_tabControlCss" @attributes="@Attributes">
    <ul class="nav nav-tabs" role="tablist">
        @{
            var itemCounter = 0;
            var selCss = _btnCssBase;
        }

        @foreach(var item in _tabPages)
        {
            @if (itemCounter == ActiveTab)
            {
                selCss = _btnCssActive;
            }
            else
            {
                selCss = _btnCssBase;
            }

            <li class="nav-item" role="presentation">
                <button class="@selCss" id="@item.TabPageId" data-bs-toggle="tab" data-bs-target="@($"#{item.TabPageId}-tab-pane")" type="button" role="tab" aria-controls="@($"{item.TabPageId}-tab-pane")" aria-selected="false">@item.Header</button>
            </li>

            itemCounter++;
        }
    </ul>


    <CascadingValue Value="this">
        <div class="@_tabPagesCss">
            @TabPages
        </div>
    </CascadingValue>
</div>

@code {
    /// <summary>
    /// Gets or sets the tab pages.
    /// </summary>
    [Parameter] public RenderFragment? TabPages { get; set; }

    /// <summary>
    /// Sets the active page within the tab pages at the start. 
    /// Is the 0 based index of the page.
    /// </summary>
    [Parameter] public int ActiveTab { get; set; }

    /// <summary>
    /// Gets or sets additonal css classes for the tab panel control.
    /// </summary>
    [Parameter] public string? ControlCss { get; set; }

    /// <summary>
    /// Gets or set additional css classes for the tab pages container.
    /// </summary>
    [Parameter] public string? ContainerCss { get; set; }

    /// <summary>
    /// This event occurs when one of the tab pages is hidden. The closed tab 
    /// is returned.
    /// </summary>
    [Parameter] public EventCallback<VilmaTabPage> TabPageHidden { get; set; }

    /// <summary>
    /// This event occurs when one of the tab pages is shown. The opened tab
    /// is returned.
    /// </summary>
    [Parameter] public EventCallback<VilmaTabPage> TabPageShown { get; set; }

    private List<VilmaTabPage> _tabPages = new List<VilmaTabPage>();
    private CssClassCollection _btnCssBase = new CssClassCollection("nav-link");
    private CssClassCollection _btnCssActive = new CssClassCollection("nav-link active");
    private CssClassCollection _tabControlCss = new CssClassCollection();
    private CssClassCollection _tabPagesCss = new CssClassCollection();

    protected override void OnParametersSet()
    {
        _tabControlCss.Clear();
        _tabControlCss.AddClasses(ControlCss);

        _tabPagesCss.Clear();
        _tabPagesCss.Add("tab-content");
        _tabPagesCss.AddClasses(ContainerCss);

        TryAddAttribute("data-bs-theme", GetColorMode());

        base.OnParametersSet();
    }

    internal void AddTabPage(VilmaTabPage page)
    {
        if (!_tabPages.Contains(page))
            _tabPages.Add(page);

        if (_tabPages.Count - 1 == ActiveTab)
            page.SetActive(true);

        StateHasChanged();
    }

    public void ActivateTab(int index)
    {
        if (index >= 0 && index < _tabPages.Count)
        {
            var tab = _tabPages[index];
            tab.SetActive();
        }
    }

    internal void InvokeTabHiddedCallback(VilmaTabPage tab)
    {
        TabPageHidden.InvokeAsync(tab);
    }

    internal void InvokeTabShownCallback(VilmaTabPage tab)
    {
        TabPageShown.InvokeAsync(tab);
    }
}
